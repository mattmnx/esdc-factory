- name: Get UUID
  command: bash -c "vmadm list alias=template |grep '[a-d0-9]-'|cut -d' ' -f1"
  register: uuid_output

- name:
  set_fact:
    template_uuid: "{{ uuid_output.stdout }}"

- name: Stop virtual machine
  vmadm: uuid="{{ template_uuid }}" state=stopped

- name: Create directory /opt/{{ template_uuid }}
  file: path="/opt/{{ template_uuid }}" state=directory

- name: Create image {{ image_name }}
  command: chdir="/opt/{{ template_uuid }}" imgadm create -c gzip "{{ template_uuid }}"
           name='Ububntu'
           version='16.04'
           published_at="{{ lookup('pipe', 'date -u +\"%Y-%m-%dT%H:%M:%SZ\"') }}"
           os=linux
           type=zvol
           nic_driver=virtio
           disk_driver=virtio
           cpu_type=qemu64
           image_size="10000"
           state="active"
           disabled="false"
           description="Base Ubuntu Image"
           homepage="http://mnx.io"
 
- name: Download image artefacts
  fetch: src="{{ item }}"
         dest="{{ builder_dir }}/"
         flat=yes
         fail_on_missing=yes
         validate_checksum=yes
  with_items:
    - "/opt/{{ template_uuid }}.zfs.gz"
    - "/opt/{{ template_uuid }}.imgmanifest"
    - "/tmp/{{ template_uuid }}.json"

- name: Remove file leftovers
  file: path="{{ item }}" state=absent
  with_items:
    - "/opt/{{ template_uuid }}"
    - "/tmp/{{ template_uuid }}.json"

- name: Get virtual machine configuration
  shell: vmadm get "{{ template_uuid }}"
  register: vm_manifest

- name: Remove virtual machine
  vmadm: name="{{ template_uuid }}" state=absent

- name: Create symlink to the latest version
  file: src="{{ builder_dir }}/{{ item.src }}"
        dest="{{ builder_dir }}/{{ item.dest }}"
        state=link
  with_items:
    - src: "{{ image_name }}-{{ image_version }}.zfs.gz"
      dest: "{{ image_name }}-latest.zfs.gz"
    - src: "{{ image_name }}-{{ image_version }}.imgmanifest"
      dest: "{{ image_name }}-latest.imgmanifest"
  delegate_to: builder

- name: Create IMGAPI item
  include: tasks/build/imgapi/item.yml
      images_dir="{{ builder.image.dir }}"
      image_file_ext='.zfs.gz'
      image_manifest="{{ builder_dir }}/{{ image_name }}-{{ image_version }}.imgmanifest"
  delegate_to: builder

- name: Re-create IMGAPI root manifest in {{ builder.image.dir }}/manifest
  include: tasks/build/imgapi/root.yml
      imgapi_dir="{{ builder.image.dir }}"
  delegate_to: builder